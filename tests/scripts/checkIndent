#!/usr/bin/env python3

# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

import subprocess
import sys
import os
from os import path
from os.path import exists
import argparse
from check_common import *

encoding = 'utf-8'

TEST_NAME = "NEX-T10448"

INDENT_CORRECT = 0
INDENT_WRONG = 1
INDENT_TRAILING = 2
INDENT_DOS = 3

def build_argparser():
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument("check", nargs="*", help="only check files listed")
  parser.add_argument("--ignore", nargs="*",
                      help="list of files and directories to ignore when checking")
  parser.add_argument("--list-python-files", action="store_true",
                      help="print a list of all python files, do not check anything")
  return parser

def stripEmptyLines(filename):
  """
  this function will strip trailing
  white spaces and empty lines from file

  :param filename: any filename
  :return: buffer
  """

  buffer = readFile(filename)
  idx = 0
  while idx < len(buffer):
    fulline = buffer[idx].rstrip()
    if fulline == '':
      buffer.pop(idx) #finding and removing empty lines
      idx -= 1
    else:
      buffer[idx] = fulline + '\n'
    idx += 1

  return buffer

def truncate(filename):
  """
  this function will truncate last
  char in file

  :param filename: any filename
  :return: None
  """
  f = open(filename, 'rb+')
  f.seek(-1, os.SEEK_END)
  f.truncate()
  f.close()

def checkReindent(filename):
  """
  This function will return INDENT_CORRECT if a file
  conforms to the python 2-space standard and has no
  trailing whitespace. If indentation is ok but there
  is trailing whitespace, it will return INDENT_TRAILING.

  :param filename: any filename
  :param level: space level
  :return: True/False
  """
  repath = os.path.abspath(os.path.join(os.path.dirname(__file__), "reindent"))
  process = subprocess.Popen([repath, '-v', '-n', filename],
                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  out, _= process.communicate()
  out = str(out)
  out = out.split("\n")
  out = set(out[0].split('\\n'))
  backup = filename + ".reindent.bak"

  ret = INDENT_WRONG
  if exists(backup):
    retVal = checkNewline(filename)
    retVal1 = checkNewline(backup)
    if retVal == False and retVal1 == True:
      truncate(backup)

    crushed_buff = stripEmptyLines(filename)
    backup_buff = stripEmptyLines(backup)
    if crushed_buff == backup_buff:
      ret = INDENT_CORRECT
    else:
      print(filename)
      for idx, line in enumerate(crushed_buff):
        if line != backup_buff[idx]:
          print(f"Wrong indentation in line: {idx} \n{line}")

    os.remove(backup)
  else:
    ret = INDENT_CORRECT

  original_buff = readFile(filename)
  trailing_buff = stripTrailingWhitespace(filename)
  if trailing_buff != original_buff:
    ret = INDENT_TRAILING
    for line in original_buff:
      if line[-2:] == '\r\n':
        ret = INDENT_DOS
        break

  return ret

def isPythonFile(filename):
  """
  this function will return True/False if a file
  is a python file

  :param filename: any filename
  :return: True/False if file is a python file
  """
  retVal = False
  try:
    with open(filename, "r") as file:
      first_line = file.readline()
      if "#!/usr/bin/env python" in first_line:
        retVal = True
      file.close()

  except UnicodeDecodeError as e:
    print(e)

  return retVal

def is_in_subdir(path, subdirs):
  for sub in subdirs:
    fpath = os.path.realpath(path)
    fdir = os.path.realpath(sub)
    relative = os.path.relpath(fpath, start=fdir)
    if not relative.startswith(os.pardir):
      return True
  return False

def main():
  args = build_argparser().parse_args()

  ignore_files = []
  ignore_dirs = []

  if args.ignore:
    for path in args.ignore:
      if not os.path.exists(path):
        print("No such file or directory to ignore:", path)
      elif os.path.isdir(path):
        ignore_dirs.append(path)
      else:
        ignore_files.append(os.path.abspath(path))

  if not args.check:
    cmd = ["git", "ls-tree", "--full-tree", "-r", "--name-only", "--full-name", "HEAD"]
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pstr = process.stdout.read()
    process.stdout.close()
    allfiles = pstr.decode("utf-8").split('\n')
  else:
    allfiles = args.check

  fail_count = 0

  for path in allfiles:
    if not len(path):
      continue

    path = os.path.realpath(path)
    if os.path.isfile(path):
      if path in ignore_files or is_in_subdir(path, ignore_dirs):
        continue

      process = subprocess.Popen(['file', '--mime', path],
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      out, err = process.communicate()
      out = out.decode(encoding)
      if 'charset=binary' not in out:
        if path.endswith('.py') or isPythonFile(path):
          if args.list_python_files:
            print(path)
          else:
            correct = checkReindent(path)
            if correct != INDENT_CORRECT:
              fail_count += 1
              if correct == INDENT_TRAILING:
                print("Trailing whitespace:", path)
              elif correct == INDENT_DOS:
                print("DOS newlines:", path)
              else:
                print("Incorrect indentation:", path)
    elif not os.path.isdir(path):
      fail_count += 1
      print("Unable to read:", path)

  if not args.list_python_files:
    if fail_count == 0:
      print(TEST_NAME + ": PASS")
    else:
      print(TEST_NAME + ": FAIL")

  return min(fail_count, 1)

if __name__ == '__main__':
  exit(main() or 0)
