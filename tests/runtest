#!/bin/bash

# SPDX-FileCopyrightText: (C) 2021 - 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

PROJECT=test$$
COMPOSE_FILES=$(echo $1 | sed -e 's/:/ /g')
shift

source $(dirname $(readlink -f $0))/../tools/yaml_parse.sh

# Remove the previous DBROOT directory before starting the new containers
if [ "${KEEP_DB}" != 1 ] ; then
    rm -rf $DBROOT
    mkdir -p $DBROOT
fi

COMPOSE_FLAGS=""
COMPOSE_DELETE=""
for COMPOSE in ${COMPOSE_FILES} ; do
    eval $(parse_yaml ${COMPOSE} COMPOSE_)
    NETWORK=${COMPOSE_networks}
    if [ -z "${NETWORK}" ] ; then
        parse_yaml ${COMPOSE} COMPOSE_
        echo Unable to parse network
        exit 1
    fi

    export DBROOT=${DBROOT:-$(dirname ${COMPOSE})}
    CTMP=$(mktemp --suffix=.yml ${PROJECT}-XXXXXX)

    IMAGE_BASE=${IMAGE%%:*}
    IMAGE_VERS=${IMAGE#*:}
    if [ -n "${IMAGE_VERS}" ] ; then
        IMAGE_VERS=":${IMAGE_VERS}"
    fi
    sed \
        -e "s|^image: scenescape\( *\|:[^ ]*\)*$|image: ${IMAGE_BASE}${IMAGE_VERS}|" \
        -e "s/${NETWORK}\(:\?\)$/${NETWORK}_${PROJECT}\1/" \
        ${COMPOSE} > ${CTMP}
    NETWORK="${NETWORK}_${PROJECT}"
    COMPOSE_FLAGS="${COMPOSE_FLAGS} -f ${CTMP}"
    COMPOSE_DELETE="${COMPOSE_DELETE} ${CTMP}"
done

source tests/test_utils.sh
COMPOSE_PROJECT_NAME=${PROJECT} make init-sample-data install-models
docker compose ${COMPOSE_FLAGS} \
               --project-directory ${PWD} \
               --project-name ${PROJECT} \
               up -d --no-recreate

RUN_TEST=1

if [ -n "$WAITFORCONTAINERS" ]; then
    declare -a "container_config=($(echo $WAITFORCONTAINERS | tr '`$<>' '????'))"
    for conf in ${container_config[@]}; do
        IFS=":", read -ra container_args <<< ${conf}
        container=${container_args[0]}
        wait_text=${container_args[1]:-"Container is ready"}

        if [ "${container}" = "pgserver" ]; then
            wait_text="database system is ready to accept connections"
        fi

        timeout=90
        if [ "${container}" = "pgserver" ] || [ "${container}" = "camcalibration" ]; then
            timeout=300
        fi
        echo Waiting ${timeout} seconds for ${container}
        if ! wait_for_container "${PROJECT}-${container}-1" "${wait_text}" "${timeout}"; then
            RUN_TEST=0
            break
        fi
        echo ${container} took ${CUR_WAIT} to be ready
    done
fi

if [ "${RUN_TEST}" = 1 ] ; then
    if [[ "${IMAGE}" == *scenescape-controller-test* ]]; then
        CMD="$@"
    else
        CMD="PYTHONPATH=/home/scenescape/SceneScape/ $@"
    fi

    tools/scenescape-start --image ${IMAGE} --network ${PROJECT}_${NETWORK} --project ${PROJECT} ${CMD}
    STATUS=$?
else
    STATUS=3
fi

if [ -n "$LOGSFORCONTAINER" ] ; then
    for container in ${LOGSFORCONTAINER}; do
        echo
        echo '---------------------------------'
        echo "docker logs ${PROJECT}-$container"
        LOG_CMD="docker logs ${PROJECT}-${container}-1 2>&1 | sed -e 's/^/${container} /'"
        if [ -n ${LOG} ] ; then
            LOG_CMD+="| tee -a ${LOG}"
        fi
        eval "${LOG_CMD}"
    done
fi

for container in $(docker ps | grep ${PROJECT} | awk '{print $NF}'); do
    TRACEFOUND=$(docker logs ${container} 2>&1 | grep "Traceback" -c)
    if [[ $TRACEFOUND -ne 0 ]]; then
        echo "Found Traceback in ${container}!"
        if [[ -n ${LOG} ]]
        then
            docker logs ${container} | tee -a ${LOG}
        else
            docker logs ${container}
        fi
    fi
done

docker compose ${COMPOSE_FLAGS} --project-directory ${PWD} --project-name ${PROJECT} down
rm -f ${COMPOSE_DELETE}

exit $STATUS
