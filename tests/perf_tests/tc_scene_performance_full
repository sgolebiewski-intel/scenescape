#!/bin/bash

# SPDX-FileCopyrightText: (C) 2022 - 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

TEST_NAME="NEX-T10488"
echo "Executing: ${TEST_NAME}"

INPUT_FRAMES=5000
INPUT_RATE=30
NUMINPUTS=2
TARGET_RATE=40
DURATION=600

DATA_BASE=sample_data
dlstreamer/=apriltag-cam

while [ $# -gt 0 -a x$(expr substr "${1:-empty}" 1 2) = "x--" ] ; do
  case "$1" in
    --target)
      TARGET_RATE=$2
      shift 2
      ;;
    --duration)
      DURATION=$2
      shift 2
      ;;
    --inputs)
      NUMINPUTS=$2
      shift 2
      ;;
    --prefix)
      dlstreamer/=$2
      shift 2
      ;;
    --datadir)
      DATA_BASE=$2
      shift 2
      ;;
    --frames)
      if [[ "$2" != "" && $2 -ge 0 && $2 -lt 100000 ]]
      then
        INPUT_FRAMES=$2
      fi
      shift 2
      ;;
    --rate)
      if [[ "$2" != "" && $2 -ge 0 && $2 -lt 91 ]]
      then
        INPUT_RATE=$2
      fi
      shift 2
      ;;
    *)
      shift 1
      ;;
  esac
done

if [[ ! -d ${DATA_BASE} ]]
then
  echo "Data directory (${DATA_BASE}) not found"
  echo "Create the directory and drop the corresponding dataset json files".
  echo "Note the data-set (sensor ids) should match the database."
  echo "${TEST_NAME}: FAIL"
  exit 1
fi

TESTBASE=tests/perf_tests

echo "Converting sample videos for DLStreamer..."
./dlstreamer-pipeline-server/convert_video_to_ts.sh

#This file is generated by the test_sceneperf_json.sh script
LOGFILE=test_mqtt_recorder_log.txt
RUNFILE=test_scene_perf.txt

#Run the scene performance test.
${TESTBASE}/scene_perf/test_sceneperf_json.sh > ${RUNFILE} 2>&1
RESULT=$?

if [[ $RESULT -eq 0 ]]
then
  FINAL_RATE=$( grep "proc time" ${LOGFILE} | tail -n 1 | awk '{print $8}' | sed -e 's/[^0-9\.]//g' )
  FINAL_TIME=$( grep "proc time" ${LOGFILE} | tail -n 1 | awk '{print $5}' | sed -e 's/[^0-9\.]//g' )
  FELL_BEHIND=$( grep "FELL BEHIND" ${LOGFILE} | wc -l )

  if [[ -z "$FINAL_RATE" || -z "$FINAL_TIME" ]]
  then
    echo "Test failed running, check mqtt+scene log at ${LOGFILE} / execution log at ${RUNFILE}"
    RESULT=1
  else
    echo "Time per msg: ${FINAL_TIME} ms, RATE: ${FINAL_RATE} messages/s, ${FELL_BEHIND} FELL BEHIND messages observed."
  fi

  if [[ $FELL_BEHIND -ne 0 ]]
  then
    echo "Observed FELL BEHIND messages. Need to re-run with lower rate/number of inputs"
  elif [[ $RESULT -eq 0 ]]
  then
    rm ${LOGFILE} ${RUNFILE}
  fi

  if [[ -n ${TARGET_RATE} ]]
  then
    RESULT=$( awk -v tr="${TARGET_RATE}" -v fr="${FINAL_RATE}" 'BEGIN {printf (fr>=tr?0:1)}' )
    if [[ $RESULT -eq 0 ]]
    then
      echo "Reached at least ${TARGET_RATE} mps!"
    else
      echo "Failed to reach minimum rate!"
    fi
  fi
fi
if [[ $RESULT -ne 0 ]]
then
  echo "Test failed running !"
  echo "${RUNFILE}---"
  cat ${RUNFILE}
  echo "---"
  echo "${LOGFILE}---"
  cat ${LOGFILE}
  echo "---"
fi

if [[ $RESULT -eq 0 ]]
then
    echo "${TEST_NAME}: PASS"
else
    echo "${TEST_NAME}: FAIL"
fi

exit $RESULT
