#!/bin/bash

# SPDX-FileCopyrightText: (C) 2021 - 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

CREATEDB=0
EXAMPLEDB=${EXAMPLEDB:-sample_data/exampledb.tar.bz2}
PSQLVER=$(ls /etc/postgresql)
PSQLDIR=/var/lib/postgresql/${PSQLVER}/main


if [ ! -e ${DBROOT} ] ; then
    # Make sure it gets correct ownership *only* if it doesn't already exist
    mkdir -p ${DBROOT}
    chown ${WSUSER}.${WSUSER} ${DBROOT}
fi

MIGRATIONS=${DBROOT}/migrations/__init__.py
DB=${DBROOT}/db
if [ ! -e ${MIGRATIONS} ] || [ ! -e ${DB}/postgresql.conf ] ; then
    CREATEDB=1
fi
if [ ${CREATEDB} = 1 ] && [ -z "${SUPASS}" ] ; then
    echo "Need to set up SUPASS before creating the DB."
    exit 1
fi
if [ -d "${DBROOT}/migrations" ]; then
    chown ${WSUSER}.${WSUSER} "${DBROOT}/migrations"
fi
if [ ${CREATEDB} = 1 ]; then
    mkdir -p ${DB}
    chown ${WSUSER}.${WSUSER} ${DB}
    sudo -u postgres pg_dropcluster ${PSQLVER} main || true
    sudo -u postgres mkdir -p ${PSQLDIR}
fi
map_dir ${DB} ${PSQLDIR} postgres postgres
if [ -d "${DBROOT}/media" ] ; then
    map_dir ${DBROOT}/media ${MANAGERDIR}/media ${WSUSER} ${WSUSER}
fi
if [ ${CREATEDB} = 1 ] ; then
    sudo -u postgres pg_createcluster -d ${PSQLDIR} ${PSQLVER} main
    echo "host all  all    0.0.0.0/0  md5" >> ${PSQLDIR}/pg_hba.conf
    echo "listen_addresses='*'" >> ${PSQLDIR}/postgresql.conf
    echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/${PSQLVER}/main/pg_hba.conf
    echo "listen_addresses='*'" >> /etc/postgresql/${PSQLVER}/main/postgresql.conf
    chown postgres.postgres /etc/postgresql/${PSQLVER}/main/*
    chown ${WSUSER}.${WSUSER} ${DB}/pg_hba.conf ${DB}/postgresql.conf

fi
/etc/init.d/postgresql start
COUNT=0
PIDFILE=/run/postgresql/${PSQLVER}-main.pid
while [ ! -e ${PIDFILE} -a ${COUNT} -lt 5 ] ; do
    COUNT=$(expr ${COUNT} + 1)
    echo Postgres not started yet: ${COUNT}
    sleep 1
done
if [ ! -e ${PIDFILE} ] ; then
    # postgres failed to start, do it manually
    su postgres -c "/usr/lib/postgresql/${PSQLVER}/bin/postgres -D ${PSQLDIR} -c config_file=/etc/postgresql/${PSQLVER}/main/postgresql.conf" &
fi
WAITPID="${WAITPID} $(cat ${PIDFILE})"

cd ${MANAGERDIR}

if [ ${CREATEDB} = 1 ] ; then
    echo ''
    echo '#############'
    echo "Creating database"
    echo '#############'
    echo ''
    mkdir -p ${DBROOT}/migrations
    touch ${MIGRATIONS}
    chown -R ${WSUSER}.${WSUSER} ${DBROOT}/migrations
    if [ -n "${DBHOST}" ] ; then
        PGHOST="-h ${DBHOST}"
    fi
    sudo -u postgres psql ${PGHOST} -c "CREATE USER ${WSUSER} WITH PASSWORD '${DBPASS}';"
    sudo -u postgres createdb ${PGHOST} -O ${WSUSER} ${WSUSER}
    mkdir -p ${DBROOT}/media
    chown ${WSUSER} ${DBROOT}/media
    chmod a+rX ${DBROOT}/media
    mkdir -p ${DBROOT}/datasets

    if [ ! -e ${MANAGERDIR}/manager/migrations ] ; then
        ln -s ${DBROOT}/migrations ${MANAGERDIR}/manager/migrations
    fi
    sudo -u ${WSUSER} -E -H ./manage.py migrate \
        && sudo -u ${WSUSER} ./manage.py makemigrations \
        && sudo -u ${WSUSER} ./manage.py migrate
fi

# Set database status to not ready while loading users and data
./manage.py updatedbstatus --not-ready

echo ''
echo '#############'
echo "Adding broker users to DB"
echo '#############'
echo ''
find -L ${RUNSECRETS} -name "*.auth" -print0 | xargs -0 ./manage.py createuser --skip-existing
if [ ${CREATEDB} = 1 ] ; then
    echo ''
    echo '#############'
    echo "Adding django admin"
    echo '#############'
    echo ''
    if [ -t 1 ] ; then
        sudo -u ${WSUSER} -E -H ./manage.py createsuperuser
    else
        DJANGO_SUPERUSER_PASSWORD="${SUPASS}" sudo -u ${WSUSER} -E -H \
                                ./manage.py createsuperuser \
                                --no-input \
                                --username=admin \
                                --email=admin@domain.com
    fi
    if [ -e ${WORKSPACE}/${EXAMPLEDB} ] ; then
        EXAMPLEDB=${WORKSPACE}/${EXAMPLEDB}
    elif [ -e ${MANAGERDIR}/${EXAMPLEDB} ] ; then
        EXAMPLEDB=${MANAGERDIR}/${EXAMPLEDB}
    fi
    if [ ${PRELOAD} = 1 -a -e ${EXAMPLEDB} ] ; then
        echo ''
        echo '#############'
        echo "Preloading example"
        echo '#############'
        echo ''
        sudo -u ${WSUSER} tar -C ${DBROOT}/media -xf ${EXAMPLEDB}
        ./manage.py loaddata ${DBROOT}/media/data.json
        rm -f ${DBROOT}/media/data.json ${DBROOT}/media/meta.json
    fi
fi

# Set database status to ready once all data is loaded
./manage.py updatedbstatus --ready

HOST=$(echo $BROKER | awk '{printf "%s\n", $2}')
HOST=${HOST:-broker.scenescape.intel.com}
PORT=1883
if [[ $HOST == *":"* ]]; then
HOSTPORT=($(echo $HOST | tr ":" " "))
HOST=${HOSTPORT[0]}
PORT=${HOSTPORT[1]}
fi
BROKERROOTCERT=${BROKERROOTCERT:-${RUNSECRETS}/scenescape-ca.pem}
BROKERAUTH=${BROKERAUTH:-${RUNSECRETS}/controller.auth}
if [ -e ${BROKERAUTH} -a -e ${BROKERROOTCERT} ] ; then
    AUTH=($(python3 -c "import sys, json; auth=json.load(sys.stdin); print(auth['user'], auth['password'])" < ${BROKERAUTH}))
    mosquitto_pub --tls-version tlsv1.3 --cafile ${BROKERROOTCERT} -h ${HOST} -p ${PORT} \
                -u ${AUTH[0]} -P ${AUTH[1]} -t scenescape/cmd/database -m "update" &
fi
