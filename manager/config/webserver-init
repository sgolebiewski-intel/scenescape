#!/bin/bash

# SPDX-FileCopyrightText: (C) 2021 - 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

cd ${MANAGERDIR}

mkdir -p ${DBROOT}/media
chown ${WSUSER} ${DBROOT}/media
chmod a+rX ${DBROOT}/media
mkdir -p ${MANAGERDIR}/media
chown www-data.www-data ${MANAGERDIR}/media
chmod ug+rwx ${MANAGERDIR}/media
map_dir ${DBROOT}/media ${MANAGERDIR}/media www-data www-data
if [ ! -d ${MANAGERDIR}/media ] || [ -z "$(ls -A ${MANAGERDIR}/media)" ]; then
  map_dir /workspace/media ${MANAGERDIR}/media www-data www-data
fi
# Remove symlink and make a copy owned by www-data
rm -f ${MANAGERDIR}/manager/secrets.py
cp ${RUNSECRETS}/django/secrets.py ${MANAGERDIR}/manager/secrets.py
chown www-data.www-data ${MANAGERDIR}/manager/secrets.py

if [ -d "${MANAGERDIR}/models" ] ; then
    chown -R www-data.www-data "${MANAGERDIR}/models"
fi

if [ -n "${BROKER}" ] ; then
    echo "${BROKER}" | awk '{printf "export BROKER=%s\n", $2}' >> /etc/apache2/envvars
fi
if [ -z "${BROKERAUTH}" ] ; then
    BROWSERAUTH=$(fgrep BROWSER_AUTH_FILE ${MANAGERDIR}/manager/settings.py \
                    | awk '{print $3}' | sed -e 's/"//g')
    # If default auth file is in /run/secrets, need to make a copy
    # that www-data can read
    if [[ "${BROWSERAUTH}" == /run/secrets/* ]] ; then
        BROKERAUTH=${BROWSERAUTH}
    fi
fi
if [ -n "${BROKERAUTH}" ] ; then
    BAUTHFILE=${WSHOME}/$(basename ${BROKERAUTH})
    cp ${BROKERAUTH} ${BAUTHFILE}
    chown www-data.www-data ${BAUTHFILE}
    echo "export BROKERAUTH=${BAUTHFILE}" >> /etc/apache2/envvars
fi

# Handle broker root cert
if [ -z "${BROKERROOTCERT}" ] ; then
    ROOTCERT=$(fgrep ROOT_CERT_FILE ${MANAGERDIR}/manager/settings.py \
                    | awk '{print $3}' | sed -e 's/"//g')
    # If default root cert file is in /run/secrets, need to make a copy
    # that www-data can read
    if [[ "${ROOTCERT}" == /run/secrets/* ]] ; then
        BROKERROOTCERT=${ROOTCERT}
    fi
fi
if [ -n "${BROKERROOTCERT}" ] ; then
    CERTFILE=${WSHOME}/$(basename ${BROKERROOTCERT})
    cp ${BROKERROOTCERT} ${CERTFILE}
    chown www-data.www-data ${CERTFILE}
    echo "export BROKERROOTCERT=${CERTFILE}" >> /etc/apache2/envvars
fi

# In Kubernetes, serve the /mqtt proxy on port 80 as well, to use behind reverse proxies
if [ -n "${KUBERNETES_SERVICE_HOST}" ] ; then
    sed -i '/<\/VirtualHost>/i \
    SSLProxyEngine on \
    ProxyPass /mqtt wss://broker.scenescape.intel.com:1884/ \
    ProxyPassReverse /mqtt wss://broker.scenescape.intel.com:1884/ \
    \n        WSGIPassAuthorization On' /etc/apache2/sites-available/000-default.conf
fi

# Change broker ProxyPass in default-ssl.conf to be dynamic
HOST=$(echo ${BROKER} | awk '{printf "%s\n", $2}')
HOST=${HOST:-broker.scenescape.intel.com}
if [[ ${HOST} == *":"* ]]; then
    sed -i "s/broker.scenescape.intel.com:1884/${HOST}/g" /etc/apache2/sites-available/default-ssl.conf
    sed -i "s/broker.scenescape.intel.com:1884/${HOST}/g" /etc/apache2/sites-available/000-default.conf
else
    sed -i "s/broker.scenescape.intel.com/${HOST}/g" /etc/apache2/sites-available/default-ssl.conf
    sed -i "s/broker.scenescape.intel.com/${HOST}/g" /etc/apache2/sites-available/000-default.conf
fi

echo "export APACHE_RUN_USER=www-data" >> /etc/apache2/envvars
echo "export APACHE_RUN_GROUP=www-data" >> /etc/apache2/envvars

echo Running interface
apache2ctl -D FOREGROUND &
WAITPID="${WAITPID} $!"
set --
