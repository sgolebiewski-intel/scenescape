#!/bin/bash

# SPDX-FileCopyrightText: (C) 2021 - 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

set -e

WSUSER=${WSUSER:-scenescape}
WORKSPACE=${WORKSPACE:-/workspace}
SECRETSDIR=${SECRETSDIR:-${WORKSPACE}/secrets}
MANAGERDIR=SceneScape
SAMPLEDATADIR=/home/scenescape/SceneScape/sample_data

RUNSECRETS=/run/secrets
EGL_PLATFORM=${EGL_PLATFORM:-surfaceless}

export EGL_PLATFORM

map_dir()
{
    SRC=$1
    DEST=$2
    DUID=$3
    DGID=$4

    SUID=$(stat -c '%u' "${SRC}")
    SGID=$(stat -c '%g' "${SRC}")

    mkdir -p ${DEST}
    chown ${DUID}:${DGID} ${DEST}
    bindfs -o nonempty --map=${SUID}/${DUID}:@${SGID}/@${DGID} ${SRC} ${DEST}
}

eval WSHOME=~${WSUSER}
MANAGERDIR="${WSHOME}/${MANAGERDIR}"
MANAGERDIR_UID=$(find "${MANAGERDIR}" -exec stat -c '%u' {} + | sort -rn | head -1)

if [ -d "${WORKSPACE}" ] ; then
    WSDIR=${HOSTDIR}
    if [ -z "${WSDIR}" ] ; then
            WSDIR=${WORKSPACE}
    fi
    WSUID=$(stat -c '%u' "${WORKSPACE}"/* | sort -rn | head -1)
    WSGID=$(stat -c '%g' "${WORKSPACE}"/* | sort -rn | head -1)
    if ((${WSUID} == 0 || ${WSGID} == 0)) ; then
            chown -R ${MANAGERDIR_UID}:${MANAGERDIR_UID} "${WORKSPACE}/"
            WSUID=${MANAGERDIR_UID}
            WSGID=${MANAGERDIR_UID}
    fi
    if [ ${WSGID} != $(id -g ${WSUSER}) ] ; then
        groupmod -g ${WSGID} ${WSUSER}
    fi
    if [ ${WSGID} != $(id -g ${WSUSER}) -o ${WSUID} != $(id -u ${WSUSER}) ] ; then
        usermod -u ${WSUID} -g ${WSGID} ${WSUSER}
    fi

    # Create a bind mount to the same location of the host dir
    if [ -n "${HOSTDIR}" ] ; then
        mkdir -p "${HOSTDIR}"
        mount --bind "${WORKSPACE}" "${HOSTDIR}"
        cd "${HOSTDIR}"
    else
        cd "${WORKSPACE}"
    fi
else
    cd "${MANAGERDIR}"
fi

# If /dev/dri/renderD128 exists, make sure it's in the video group so
# it can be used for GPU inference
for ((i=128; i<130; i++))
do
    GPUDEV=/dev/dri/renderD${i}
    if [ -e ${GPUDEV} ] ; then
        chgrp video ${GPUDEV}
    fi
done
if [ -z "${DBROOT}" ] ; then
    DBROOT="${WORKSPACE}"
else
    case "${DBROOT}" in
        /* )
            ;;
        * )
            DBROOT=${WORKSPACE}/${DBROOT}
            ;;
    esac
fi

if [ -n "${SECRETSDIR}" ] ; then
    case "${SECRETSDIR}" in
        /* )
            ;;
        * )
            SECRETSDIR=${WORKSPACE}/${SECRETSDIR}
            ;;
    esac
fi

while [ $# -gt 0 -a x$(expr substr "$1" 1 2) = "x--" ] ; do
    case "$1" in
        --shell)
            DO_SHELL=user
            shift
            ;;
        --super-shell)
            DO_SHELL=super
            shift
            ;;
        *)
            echo "Unknown flag $1"
            exit 1
    esac
done

echo "TIMEZONE IS" ${TZ}

START_WEBSERVER=0
START_DATABASE=0

case "$1" in
    webserver)
        START_WEBSERVER=1
        shift
        ;;
    database)
        START_DATABASE=1
        shift
        ;;
    server)
        START_WEBSERVER=1
        START_DATABASE=1
        shift
        ;;
esac

PRELOAD=0

while [ $# -gt 0 -a x$(expr substr "${1:-empty}" 1 2) = "x--" ] ; do
    case "$1" in
        # global options
        --broker)
            BROKER="$1 $2"
            shift 2
            ;;
        --brokerauth)
            BROKERAUTH="$2"
            shift 2
            ;;
        --brokerrootcert)
            BROKERROOTCERT="$2"
            shift 2
            ;;
        --dbhost)
            DBHOST="$2"
            shift 2
            ;;
        --dbtype)
            DBTYPE="$2"
            shift 2
            ;;
        --dbport)
            DBPORT="$2"
            shift 2
            ;;

        # webserver options
        --nointerface)
            echo Not running interface
            START_WEBSERVER=0
            shift
            ;;
        --debug)
            echo Setting DEBUG=True
            DEBUG=1
            shift
            ;;
        # database options
        --nopostgres)
            START_DATABASE=0
            shift
            ;;
        --preloadexample)
            PRELOAD=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

SETTINGS_FILE="${MANAGERDIR}/manager/settings.py"

if [ "$DBTYPE" = "postgres" ]; then
    ENGINE="django.db.backends.postgresql_psycopg2"
    PORT=${DBPORT:-5432}
elif [ "$DBTYPE" = "mysql" ]; then
    ENGINE="django.db.backends.mysql"
    PORT=${DBPORT:-3306}
else
    echo "Unsupported DBTYPE: $DBTYPE"
    exit 1
fi

sed -i -E "s|'ENGINE': '[^']*'|'ENGINE': '$ENGINE'|; \
           s|'HOST': '[^']*'|'HOST': '$DBHOST'|; \
           s|'PORT': '[^']*'|'PORT': '$PORT'|; \
           s|'PASSWORD': '[^']*'|'PASSWORD': '$DATABASE_PASSWORD'|" \
    "$SETTINGS_FILE"

grep -E "ENGINE|HOST|PORT|PASSWORD" "$SETTINGS_FILE"

# Debug
if [[ ${DEBUG} -eq 1 ]] ; then
    echo "WARNING: Setting DEBUG = True"
    sed -i "s/DEBUG = False/DEBUG = True/g" ${MANAGERDIR}/manager/settings.py
fi

# Create a symbolic link to secrets directory if needed
if [[ ! -e ${RUNSECRETS} && -n "${SECRETSDIR}" && -d "${SECRETSDIR}" ]]; then
    echo "Creating symbolic link to secrets directory"
    ln -s "${SECRETSDIR}" "${RUNSECRETS}"
fi
if [ -e ${RUNSECRETS}/django/secrets.py ] ; then
    cp ${RUNSECRETS}/django/secrets.py ${MANAGERDIR}/manager/secrets.py
    chown -R $WSUID:$WSGID ${MANAGERDIR}/manager/secrets.py
fi
if [ -e ${MANAGERDIR}/manager/secrets.py ] ; then
    DBPASS=$(sed -r -n -e "/DATABASE_PASSWORD=/s/.*'([^']+)'/\1/p" \
                 ${MANAGERDIR}/manager/secrets.py)
fi

export -n DBPASS SUPASS

cd ${MANAGERDIR}
echo Waiting for database
./manage.py waitfordb

CREATEDB=0
MIGRATIONS=${DBROOT}/migrations/__init__.py
if [ ! -e ${MIGRATIONS} ] ; then
    CREATEDB=1
fi

if [ ${CREATEDB} = 1 ] ; then
    mkdir -p ${DBROOT}/migrations
    touch ${MIGRATIONS}
    echo "Checking if database is empty..."
    if ! ./manage.py showmigrations | grep -q '\[X\]'; then
        echo "Database is empty â€” running initial migrations..."
        ./manage.py makemigrations manager
        ./manage.py migrate
    fi
fi

./manage.py updatedbstatus --not-ready
find -L ${RUNSECRETS} -name "*.auth" -print0 | xargs -0 ./manage.py createuser --skip-existing
echo ''
echo '#############'
echo "Adding django admin"
echo '#############'

if ! sudo -u ${WSUSER} -E -H ./manage.py shell -c \
    "from django.contrib.auth import get_user_model; \
     User = get_user_model(); \
     exit(0) if User.objects.filter(username='admin').exists() else exit(1)"; then

    DJANGO_SUPERUSER_PASSWORD="${SUPASS}" sudo -u ${WSUSER} -E -H \
        ./manage.py createsuperuser \
        --no-input \
        --username=admin \
        --email=admin@domain.com
fi

if [ ${CREATEDB} = 1 ] ; then
    if [ -n "$EXAMPLEDB" ]; then
        echo ''
        echo '#############'
        echo "Preloading example"
        echo '#############'
        echo ''
        tar -C ${DBROOT}/media -xf $SAMPLEDATADIR/$EXAMPLEDB
        echo "EXAMPLEDB is configured: $SAMPLEDATADIR/$EXAMPLEDB"
        ./manage.py loaddata ${DBROOT}/media/data.json
        rm -f ${DBROOT}/media/data.json ${DBROOT}/media/meta.json
    fi
fi

./manage.py updatedbstatus --ready

WAITPID=""

if [ ${START_WEBSERVER} = 1 ] ; then
    source /usr/local/bin/webserver-init
fi

echo "Took ${SECONDS} seconds"
echo "Container is ready"
# for kubernetes readinessProbe
touch /tmp/healthy

if [ -n "${WAITPID}" ] ; then
    IFS=' '
    MULTISTAT=""
    for pid in ${WAITPID} ; do
        tail --pid=${pid} -f /dev/null
        wait ${pid}
        MULTISTAT="${MULTISTAT} $?"
    done
    for STATUS in ${MULTISTAT} ; do
        if [ $STATUS != 0 ] ; then
            break
        fi
    done
else
    if [ "${DO_SHELL}" = 'user' ] ; then
        if [ $# -gt 0 ] ; then
            # echo "Starting shell with command: $@"
            IFS=
            sudo -u ${WSUSER} -E -H -s $@
        else
            # echo "Starting shell"
            su ${WSUSER}
        fi
    elif [ "${DO_SHELL}" = 'super' ] ; then
        if [ $# -gt 0 ] ; then
            # echo "Starting super shell with command: $@"
            /bin/bash -c "$@"
        else
            # echo "Starting super shell"
            /bin/bash
        fi
    else
        if [ $# -gt 0 ] ; then
            IFS=
            sudo -u ${WSUSER} -E -H $@
        else
            su ${WSUSER}
        fi
    fi
    STATUS=$?
fi
#echo "scenescape exit status:" ${STATUS}
exit ${STATUS}
