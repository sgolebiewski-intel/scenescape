# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# prefix for volume and container names, override with the environment variable COMPOSE_PROJECT_NAME
name: scenescape

networks:
  scenescape:

secrets:
  root-cert:
    file: ${SECRETSDIR}/certs/scenescape-ca.pem
  web-cert:
    file: ${SECRETSDIR}/certs/scenescape-web.crt
  web-key:
    file: ${SECRETSDIR}/certs/scenescape-web.key
  vdms-client-cert:
    file: ${SECRETSDIR}/certs/scenescape-vdms-c.crt
  vdms-client-key:
    file: ${SECRETSDIR}/certs/scenescape-vdms-c.key
  vdms-server-cert:
    file: ${SECRETSDIR}/certs/scenescape-vdms-s.crt
  vdms-server-key:
    file: ${SECRETSDIR}/certs/scenescape-vdms-s.key
  django:
    file: ${SECRETSDIR}/django
  controller.auth:
    environment: CONTROLLER_AUTH
  browser.auth:
    file: ${SECRETSDIR}/browser.auth
  calibration.auth:
    file: ${SECRETSDIR}/calibration.auth

services:

  mediaserver:
    image: bluenviron/mediamtx
    networks:
      scenescape:
        aliases:
          - mediaserver.scenescape.intel.com
    ports:
      - "8554:8554"

  queuing-cams:
    image: linuxserver/ffmpeg:version-8.0-cli
    command: -re -stream_loop -1 -i /workspace/media/qcam1.mp4 -re -stream_loop -1 -i /workspace/media/qcam2.mp4 -map 0:v -c copy -f rtsp rtsp://mediaserver.scenescape.intel.com:8554/queuing-cam1 -map 1:v -c copy -f rtsp rtsp://mediaserver.scenescape.intel.com:8554/queuing-cam2
    volumes:
      - vol-sample-data:/workspace/media
    networks:
      scenescape:
    depends_on:
      - mediaserver

  ntpserv:
    image: dockurr/chrony
    networks:
      scenescape:
    # ports:
    #   - 123:123/udp
    restart: on-failure

  broker:
    image: eclipse-mosquitto
    # ports:
    #   - "1883:1883"
    configs:
      - source: mosquitto-secure
        target: /mosquitto/config/mosquitto.conf
    volumes:
      - ${SECRETSDIR}:/mosquitto/secrets
    networks:
      scenescape:
        aliases:
          - broker.scenescape.intel.com
    user: "${UID:-1000}:${GID:-1000}"

  pgserver:
    image: scenescape-manager:${VERSION:-latest}
    init: true
    networks:
      scenescape:
    environment:
      - "SUPASS"
      - "DBROOT"
    command: database --preloadexample
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    security_opt:
      - apparmor:unconfined
    volumes:
      - vol-db:/workspace/db
      - vol-migrations:/workspace/migrations
      - vol-media:/workspace/media
      - vol-sample-data:/home/scenescape/SceneScape/sample_data
    secrets:
      - django
      - controller.auth
      - browser.auth
    restart: always

  web:
    image: scenescape-manager:${VERSION:-latest}
    init: true
    networks:
      scenescape:
        aliases:
          - web.scenescape.intel.com
    depends_on:
      - pgserver
    ports:
      - "443:443"
    environment:
      - "DBROOT"
    command: webserver --dbhost pgserver --broker broker.scenescape.intel.com --brokerauth /run/secrets/browser.auth --brokerrootcert /run/secrets/certs/scenescape-ca.pem
    healthcheck:
      test: "curl --insecure -X GET https://web.scenescape.intel.com:443/api/v1/database-ready | grep 'true'"
      interval: 10s
      timeout: 120s
      retries: 10
      start_period: 10s
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    security_opt:
      - apparmor:unconfined
    # web interface needs access to the media files
    volumes:
      - vol-media:/workspace/media
    secrets:
      - source: root-cert
        target: certs/scenescape-ca.pem
      - source: web-cert
        target: certs/scenescape-web.crt
      - source: web-key
        target: certs/scenescape-web.key
      - django
      - browser.auth
    restart: always

  scene:
    image: scenescape-controller:${VERSION:-latest}
    init: true
    networks:
      scenescape:
    depends_on:
      web:
        condition: service_healthy
      broker:
        condition: service_started
      ntpserv:
        condition: service_started
      # vdms:
      #   condition: service_started
    command: --restauth /run/secrets/controller.auth --brokerauth /run/secrets/controller.auth --broker broker.scenescape.intel.com --ntp ntpserv
    # mount the trackerconfig file to the container
    configs:
      - source: tracker-config
        target: /home/scenescape/SceneScape/tracker-config.json
    volumes:
      - vol-media:/home/scenescape/SceneScape/media
    secrets:
      - source: root-cert
        target: certs/scenescape-ca.pem
      - source: vdms-client-key
        target: certs/scenescape-vdms-c.key
      - source: vdms-client-cert
        target: certs/scenescape-vdms-c.crt
      - django
      - controller.auth
    restart: always

  # vdms:
  #   image: intellabs/vdms:latest
  #   init: true
  #   networks:
  #     scenescape:
  #       aliases:
  #         - vdms.scenescape.intel.com
  #   environment:
  #     - OVERRIDE_ca_file=/run/secrets/certs/scenescape-ca.pem
  #     - OVERRIDE_cert_file=/run/secrets/certs/scenescape-vdms-s.crt
  #     - OVERRIDE_key_file=/run/secrets/certs/scenescape-vdms-s.key
  #   secrets:
  #     - source: root-cert
  #       target: certs/scenescape-ca.pem
  #     - source: vdms-server-cert
  #       target: certs/scenescape-vdms-s.crt
  #     - source: vdms-server-key
  #       target: certs/scenescape-vdms-s.key
  #   restart: always

  retail-video:
    image: docker.io/intel/dlstreamer-pipeline-server:3.0.0
    privileged: true
    networks:
      scenescape:
    tty: true
    entrypoint: ["./run.sh"]
    ports:
      - "8080:8080"
      - "8554:8554"
    devices:
      - "/dev/dri:/dev/dri"
    depends_on:
      broker:
        condition: service_started
      ntpserv:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--server-response",
          "http://localhost:8080/pipelines",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - RUN_MODE=EVA
      - DETECTION_DEVICE=CPU
      - CLASSIFICATION_DEVICE=CPU
      - ENABLE_RTSP=true
      - RTSP_PORT=8554
      - REST_SERVER_PORT=8080
      - GENICAM=Balluff
      - GST_DEBUG="1,gencamsrc:2"
      - ADD_UTCTIME_TO_METADATA=true
      - APPEND_PIPELINE_NAME_TO_PUBLISHER_TOPIC=false
      - MQTT_HOST=broker.scenescape.intel.com
      - MQTT_PORT=1883
    configs:
      - source: retail-config
        target: /home/pipeline-server/config.json
      - source: person-detection-retail-config
        target: /home/pipeline-server/models/object_detection/person/person-detection-retail-0013.json
    volumes:
      - ./dlstreamer-pipeline-server/user_scripts:/home/pipeline-server/user_scripts
      - vol-dlstreamer-pipeline-server-pipeline-root:/var/cache/pipeline_root:uid=1999,gid=1999
      - vol-sample-data:/home/pipeline-server/videos
      - vol-models:/home/pipeline-server/models
    secrets:
      - source: root-cert
        target: certs/scenescape-ca.pem

  queuing-video:
    image: docker.io/intel/dlstreamer-pipeline-server:3.0.0
    privileged: true
    networks:
      scenescape:
    tty: true
    entrypoint: ["./run.sh"]
    ports:
      - "8081:8080"
      - "8555:8554"
    devices:
      - "/dev/dri:/dev/dri"
    depends_on:
      queuing-cams:
        condition: service_started
      broker:
        condition: service_started
      ntpserv:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--server-response",
          "http://localhost:8080/pipelines",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - RUN_MODE=EVA
      - DETECTION_DEVICE=CPU
      - CLASSIFICATION_DEVICE=CPU
      - ENABLE_RTSP=true
      - RTSP_PORT=8554
      - REST_SERVER_PORT=8080
      - GENICAM=Balluff
      - GST_DEBUG="1,gencamsrc:2"
      - ADD_UTCTIME_TO_METADATA=true
      - APPEND_PIPELINE_NAME_TO_PUBLISHER_TOPIC=false
      - MQTT_HOST=broker.scenescape.intel.com
      - MQTT_PORT=1883
    configs:
      - source: queuing-config
        target: /home/pipeline-server/config.json
      - source: person-detection-queing-config
        target: /home/pipeline-server/models/object_detection/person/person-detection-retail-0013.json
    volumes:
      - ./dlstreamer-pipeline-server/user_scripts:/home/pipeline-server/user_scripts
      - vol-dlstreamer-pipeline-server-pipeline-root:/var/cache/pipeline_root:uid=1999,gid=1999
      - vol-sample-data:/home/pipeline-server/videos
      - vol-models:/home/pipeline-server/models
    secrets:
      - source: root-cert
        target: certs/scenescape-ca.pem

  camcalibration:
    image: scenescape-camcalibration
    init: true
    networks:
      scenescape:
    command: camcalibration --broker broker.scenescape.intel.com --resturl https://web.scenescape.intel.com:443/api/v1
    depends_on:
      web:
        condition: service_healthy
      broker:
        condition: service_started
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    security_opt:
      - apparmor:unconfined
    environment:
      - EGL_PLATFORM=surfaceless
      - "DBROOT"
      - NETVLAD_MODEL_DIR=/usr/local/lib/python3.10/dist-packages/third_party/netvlad
    volumes:
      - vol-media:/workspace/media
      - vol-datasets:/workspace/datasets
      - vol-netvlad_models:/usr/local/lib/python3.10/dist-packages/third_party/netvlad
    secrets:
      - source: root-cert
        target: certs/scenescape-ca.pem
      - django
      - calibration.auth
    restart: always

  mqtt_recorder:
    image: scenescape-manager:${VERSION:-latest}
    init: true
    environment:
      - "SUPASS"
    networks:
      scenescape:
    command: bash -c "SUPASS=${SUPASS} PYTHONPATH=/workspace tests/perf_tests/scene_perf/scene_mqtt_recorder.py --output /workspace/scene_mqtt_recorder.log"
    privileged: true
    volumes:
      - ./:/workspace
    secrets:
      - source: root-cert
        target: certs/scenescape-ca.pem
    tty: true

configs:
  mosquitto-secure:
    file: ./dlstreamer-pipeline-server/mosquitto/mosquitto-secure.conf
  tracker-config:
    file: ./controller/config/tracker-config.json
  retail-config:
    file: ./dlstreamer-pipeline-server/retail-config.json
  person-detection-retail-config:
    file: ./dlstreamer-pipeline-server/model-proc-files/person-detection-retail-0013.json
  queuing-config:
    file: ./dlstreamer-pipeline-server/queuing-config.json
  person-detection-queing-config:
    file: ./dlstreamer-pipeline-server/model-proc-files/person-detection-retail-0013.json

volumes:
  vol-db:
  vol-media:
  vol-migrations:
  vol-datasets:
  vol-sample-data:
  vol-models:
  vol-netvlad_models:
    driver: local
  vol-dlstreamer-pipeline-server-pipeline-root:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
