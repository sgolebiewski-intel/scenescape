---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "[Tests] All Tests"
run-name: "[Tests] All Tests"

on:
  schedule:
    - cron: "0 2 * * *" # Runs daily at 2:00 AM UTC
  workflow_dispatch:
    inputs:
      cleanup:
        description: "Cleanup before running ALL tests"
        required: false
        default: false
        type: boolean
      timeout:
        description: "Timeout for the job in minutes"
        required: false
        type: number
        default: 90
  push:
    branches:
      - main
      - release-*

  # Trigger workflow when enqueued to a merge group
  # (must be under 'on')
  merge_group: {}

# Only run at most 1 workflow concurrently per PR or per branch to keep costs down
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  DOCKER_BUILDKIT: 1
  SUPASS: ${{ secrets.SUPASS }}
  BUILD_TYPE: DAILY

permissions:
  contents: read

jobs:
  run-all-tests:
    name: "Run All Tests"
    runs-on: [self-hosted]
    timeout-minutes: ${{ fromJSON(inputs.timeout || '90') }}
    steps:
      - name: "Remove all Docker images"
        if: ${{ github.event.inputs.cleanup == 'true' }}
        uses: ./.github/actions/cleanup
        with:
          system-prune: "true"

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: "Setup Python"
        id: setup-python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.13"

      - name: "Cache Python Virtualenv"
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/resources/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}

      - name: "Run Secrets and Certificates Initialization"
        run: |
          git clean -fdx
          make clean-all
          make -C tools/certificates clean
          make init-secrets

      - name: "Build scene_common"
        run: |
          make -C scene_common

      - name: "Run All Tests"
        run: |
          python3 -m venv venv
          source $PWD/venv/bin/activate
          echo "$PWD/venv/bin" >> $GITHUB_PATH
          pip install -r .github/resources/requirements.txt
          make run_tests

      - name: Rename logs to remove colons
        if: always()
        run: |
          set +e # Ignore errors if no logs are found
          find . -type f -path "**/test_data/*.log" | while read -r file; do
            newfile="$(dirname "$file")/$(basename "$file" | tr ':' '-')"
            if [ "$file" != "$newfile" ]; then
              mv "$file" "$newfile"
            fi
          done
          exit 0

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: tests-reports
          path: |
            tests/**/test_reports/**/*.html
            tests/**/test_reports/**/*.xml

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: tests-logs
          path: |
            **/test_data/**/*.log

      - name: Cleanup
        if: always()
        uses: ./.github/actions/cleanup
