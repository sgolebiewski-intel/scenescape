---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "[Tests] Basic Acceptance Tests"
run-name: "[Tests] Basic Acceptance Tests"

on:
  workflow_dispatch:
    inputs:
      cleanup:
        description: "Cleanup before running BAT tests"
        required: false
        default: false
        type: boolean
      timeout:
        description: "Timeout for the job in minutes"
        required: false
        type: number
        default: 60
  pull_request:
    branches:
      - main
      - release-*
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - release-*

  # Trigger workflow when enqueued to a merge group
  # (must be under 'on')
  merge_group: {}

# Only run at most 1 workflow concurrently per PR or per branch to keep costs down
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  DOCKER_BUILDKIT: 1
  SUPASS: ${{ secrets.SUPASS }}

permissions:
  contents: read

jobs:
  check-pr-state:
    name: "Check PR State"
    runs-on: ubuntu-latest
    outputs:
      pr_state: ${{ steps.check_pr.outputs.pr_state }}
    steps:
      - name: Checkout code
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: "Set up GitHub CLI"
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          sudo apt-get update && sudo apt-get install gh

      - name: "Check PR state"
        id: check_pr
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.number }}
          PR_STATE=$(gh pr view $PR_NUMBER --json isDraft --jq '.isDraft')
          echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT
          echo "PR State \"isDraft\": $PR_STATE"

      - name: "Return success if triggered manually"
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "Triggered manually."
          exit 0

  run-basic-acceptance-tests:
    name: "Run Basic Acceptance Tests"
    runs-on: [self-hosted]
    timeout-minutes: ${{ fromJSON(inputs.timeout || '60') }}
    needs: check-pr-state
    steps:
      - name: "Fail if PR is in draft state"
        if: ${{ github.event_name == 'pull_request' && needs.check-pr-state.outputs.pr_state == 'true' }}
        run: |
          echo "Tests are skipped because the PR is in draft state."
          echo "Please mark the PR as ready for review to run the Basic Acceptance Tests."
          echo "If you want to run the tests manually, you can use the 'workflow_dispatch' event."
          exit 1

      - name: Fail if PR has no 'run-bat' label
        if: ${{ github.event_name == 'pull_request'  && !contains(github.event.pull_request.labels.*.name, 'run-bat') }}
        run: |
          echo "Tests are skipped because the PR does not have the 'run-bat' label."
          echo "Please add the 'run-bat' label to run the Basic Acceptance Tests."
          echo "If you want to run the tests manually, you can use the 'workflow_dispatch' event."
          exit 1

      - name: "Checkout Repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: "Remove all Docker images"
        if: ${{ github.event.inputs.cleanup == 'true' }}
        run: |
          docker system prune -a --volumes -f

      - name: "Run Basic Acceptance Tests (BAT)"
        run: |
          make clean-all
          git clean -fdx
          make run_basic_acceptance_tests

      - name: "Run Basic Acceptance Tests (BAT) - k8s"
        run: |
          make clean-all
          git clean -fdx
          make run_basic_acceptance_tests_k8s SUPASS=change_me KUBERNETES=1

      - name: Rename logs to remove colons
        if: always()
        run: |
          set +e # Ignore errors if no logs are found
          find . -wholename "**/test_data/**/*.log" -exec rename 's/:/-/g' {} +
          exit 0

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: tests-reports
          path: |
            tests/**/test_reports/**/*.html
            tests/**/test_reports/**/*.xml

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: tests-logs
          path: |
            **/test_data/**/*.log

      - name: "Stop all running Docker containers"
        if: always()
        run: |
          docker ps -q | xargs -r docker kill

      - name: "Clean runner"
        if: always()
        run: |
          if [ -n "$GITHUB_WORKSPACE" ] && [ -d "$GITHUB_WORKSPACE" ]; then
            find "$GITHUB_WORKSPACE" -type f -exec chmod u+rw {} \;
            find "$GITHUB_WORKSPACE" -mindepth 1 -delete
          else
            echo "Error: GITHUB_WORKSPACE is not set or is not a directory" >&2
            exit 1
          fi
