# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-{{ .Values.initSecrets.image }}
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- if .Values.hooks.enabled }}
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    {{- if not .Values.chartdebug }}
    "helm.sh/hook-delete-policy": hook-succeeded
    {{- end }}
    {{- end }}
spec:
  template:
    spec:
      containers:
      - command: ["/bin/bash", "-c"]
        args:
        - # Set bash options: -e (exit on error), -u (error on unset variables), -o pipefail (fail if any command in pipeline fails)
          set -euo pipefail;
          echo "Generating secrets.";
          SECRETSDIR=/root/secrets make -C /root/ certificates && echo "Generated secrets.";
          SECRETSDIR=/root/secrets make -C /root/ auth-secrets && echo "Generated auth secrets.";
          echo "Creating Kubernetes secrets";
          kubectl create secret generic {{ .Release.Name }}-certs --from-file=/root/secrets/certs -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-django --from-file=/root/secrets/django -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-scenescape-broker.key --from-file=/root/secrets/certs/scenescape-broker.key -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-scenescape-broker.crt --from-file=/root/secrets/certs/scenescape-broker.crt -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-scenescape-ca.pem --from-file=/root/secrets/certs/scenescape-ca.pem -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-controller.auth --from-file=/root/secrets/controller.auth -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-browser.auth --from-file=/root/secrets/browser.auth -n {{ .Release.Namespace }};
          kubectl create secret generic {{ .Release.Name }}-calibration.auth --from-file=/root/secrets/calibration.auth -n {{ .Release.Namespace }};
          echo "Kubernetes secrets successfully generated.";
          echo "Copying user-access-config.";
          cp /root/docker/user_access_config.json /root/user-access-config-storage/;
          chown -R 1000:1000 /root/user-access-config-storage;
          echo "Copied user-access-config.";
        image: {{ .Values.repository }}/{{ .Values.initSecrets.image }}:{{ .Chart.AppVersion }}
        name: {{ .Values.initSecrets.image }}-container
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /root/user-access-config-storage
          name: user-access-config-storage
        env:
        - name: RELEASE
          value: {{ .Release.Name }}-
        - name: CERTDOMAIN
          value: {{ .Release.Namespace }}.svc.cluster.local
{{- if .Values.proxy.enabled }}
        - name: HTTP_PROXY
          value: {{ .Values.proxy.httpProxy }}
        - name: HTTPS_PROXY
          value: {{ .Values.proxy.httpsProxy }}
        - name: NO_PROXY
          value: {{ .Values.proxy.noProxy }}
        - name: http_proxy
          value: {{ .Values.proxy.httpProxy }}
        - name: https_proxy
          value: {{ .Values.proxy.httpsProxy }}
        - name: no_proxy
          value: {{ .Values.proxy.noProxy }}
{{- end }}
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: user-access-config-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-user-access-config-pvc
      serviceAccountName: {{ .Release.Name }}-secret-writer-sa
  backoffLimit: 3
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-secret-writer
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-4"
    {{- if .Values.hooks.enabled }}
    "helm.sh/hook-delete-policy": hook-succeeded
    {{- end }}
rules:
- apiGroups: [""]
  resources: ["secrets", "persistentvolumeclaims"]
  verbs: ["list", "watch", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-secret-writer-binding
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-3"
    {{- if .Values.hooks.enabled }}
    "helm.sh/hook-delete-policy": hook-succeeded
    {{- end }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-secret-writer
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-secret-writer-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-secret-writer-sa
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    {{- if .Values.hooks.enabled }}
    "helm.sh/hook-delete-policy": hook-succeeded
    {{- end }}
