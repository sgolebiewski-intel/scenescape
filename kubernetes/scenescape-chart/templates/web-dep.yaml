# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-web-dep
  labels:
    app: {{ .Release.Name }}-web
  annotations:
    container.apparmor.security.beta.kubernetes.io/web: unconfined
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-web
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-web
    spec:
      shareProcessNamespace: true
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      initContainers:
        - name: wait-for-postgres
          image: {{ .Values.pgserver.repository }}/{{ .Values.pgserver.image }}:{{ .Values.pgserver.tag}}
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-db
                  key: DATABASE_PASSWORD
          command:
            - sh
            - -c
            - |
              echo "Waiting for Postgres to be ready..."
              until pg_isready -h pgserver.{{ .Release.Namespace }}.svc.cluster.local -U scenescape -d scenescape; do
                sleep 2
              done
              echo "Postgres is ready!"
          securityContext:
            {{ include "defaultContainerSecurityContext" . | indent 12 }}
      containers:
        - name: {{ .Release.Name }}-web
          image: {{ .Values.repository }}/{{ .Values.web.image }}:{{ .Chart.AppVersion }}
          args:
            - webserver
            - --dbhost
            - pgserver.{{ .Release.Namespace }}.svc.cluster.local
            - --dbtype
            - postgres
            - --dbport
            - "5432"
            - --broker
            - broker.{{ .Release.Namespace }}.svc.cluster.local
            - --brokerauth
            - /run/secrets/browser.auth
            - --brokerrootcert
            - /run/secrets/certs/scenescape-ca.pem
          env:
          - name: MODEL_CONFIGS_FOLDER
            value: /home/scenescape/SceneScape/models/models/model_configs
          - name: EXAMPLEDB
            value: /home/scenescape/SceneScape/sample_data/exampledb.tar.bz2
          - name: SUPASS
            value: {{ required "You must set supass (e.g. --set supass=...) for this chart to install." .Values.supass | quote }}
{{- if ne (default .Values.dbroot "") "" }}
          - name: DBROOT
            value: {{ .Values.dbroot }}
{{- end }}
            {{ include "proxy_envs" . | indent 10 }}
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
          ports:
          - containerPort: 443
          readinessProbe:
            exec:
              command:
              - cat
              - /tmp/healthy
            periodSeconds: 1
          resources: {}
          volumeMounts:
          - mountPath: /dev/fuse
            name: dev-fuse
          - mountPath: /run/secrets/certs
            name: certs
            readOnly: true
          - mountPath: /run/secrets/django
            name: django
            readOnly: true
          - mountPath: /run/secrets/browser.auth
            name: browser-auth
            subPath: browser.auth
            readOnly: true
          - mountPath: /run/secrets/controller.auth
            name: controller-auth
            subPath: controller.auth
            readOnly: true
          - mountPath: /run/secrets/calibration.auth
            name: calibration-auth
            subPath: calibration.auth
            readOnly: true
          - mountPath: /run/secrets/scenescape-ca-pem
            name: scenescape-ca-pem
            subPath: scenescape-ca.pem
            readOnly: true
          - mountPath: /workspace/media
            name: media-storage
          - mountPath: /home/scenescape/SceneScape/sample_data
            name: sample-data-storage
            subPath: sample_data
          - mountPath: /home/scenescape/SceneScape/models
            name: models-storage
          - mountPath: /workspace/migrations
            name: migrations-storage

      restartPolicy: Always
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: dev-fuse
        hostPath:
          path: /dev/fuse
      - name: certs
        secret:
          secretName: {{ .Release.Name }}-certs
      - name: django
        secret:
          secretName: {{ .Release.Name }}-django
      - name: browser-auth
        secret:
          secretName: {{ .Release.Name }}-browser.auth
      - name: controller-auth
        secret:
          secretName: {{ .Release.Name }}-controller.auth
      - name: calibration-auth
        secret:
          secretName: {{ .Release.Name }}-calibration.auth
      - name: scenescape-ca-pem
        secret:
          secretName: {{ .Release.Name }}-scenescape-ca.pem
      - name: media-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-media-pvc
      - name: sample-data-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-sample-data-pvc
      - name: models-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-models-pvc
      - name: migrations-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-migrations-pvc
      {{- if .Values.tests.enabled }}
      - name: tests-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-tests-pvc
      {{- end }}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: web
  annotations: {{- toYaml .Values.service.annotations | nindent 4 }}
spec:
  selector:
    app: {{ .Release.Name }}-web
  ports:
  - name: "80"
    protocol: TCP
    port: 80
    targetPort: 80
  - name: "443"
    protocol: TCP
    port: 443
    targetPort: 443
{{- if .Values.loadBalancer.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: web-lb
  annotations: {{- toYaml .Values.loadBalancer.annotations | nindent 4 }}
spec:
  type: LoadBalancer
  selector:
    app: {{ .Release.Name }}-web
  ports:
  - name: "443"
    protocol: TCP
    port: 443
    targetPort: 443
  externalTrafficPolicy: {{ .Values.loadBalancer.externalTrafficPolicy }}
  {{- if (default .Values.loadBalancer.loadBalancerIP false) }}
  loadBalancerIP: {{ .Values.loadBalancer.loadBalancerIP }}
  {{- end }}
{{- end }}
{{- if .Values.nodePort.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: web-np
  annotations: {{- toYaml .Values.nodePort.annotations | nindent 4 }}
spec:
  type: NodePort
  selector:
    app: {{ .Release.Name }}-web
  ports:
  - name: "443"
    protocol: TCP
    port: 443
{{- end }}
